import{A as m,n as a,pa as b,qa as i,r as l}from"./chunk-HFTH3AZB.js";var n=async r=>new Promise(e=>setTimeout(e,r));var t={baseUrl:"https://api.github.com/repos/angular/angular",gitHubToken:""};var p=t.baseUrl,f=t.gitHubToken,k=async()=>{await n(1500);try{let r=await fetch(`${p}/labels`,{headers:{Authorization:`Bearer ${f}`}});if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);return await r.json()}catch(r){throw console.error("Error fetching labels:",r),r}};var d=t.baseUrl,_=t.gitHubToken,R=async(r="all",e)=>{await n(1500);let s=new URLSearchParams;s.append("state",r),e.length>0&&s.append("labels",e.join(","));try{let o=await fetch(`${d}/issues?${s}`,{headers:{Authorization:`Bearer ${_}`}});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);return await o.json()}catch(o){throw console.error("Error fetching labels:",o),o}};var h=t.baseUrl,y=t.gitHubToken,u=async r=>{await n(1500);try{let e=await fetch(`${h}/issues/${r}`,{headers:{Authorization:`Bearer ${y}`}});if(!e.ok)throw"Can't load issues";return await e.json()}catch(e){throw console.error("Error fetching labels:",e),"Can't load issues"}};var w=t.baseUrl,N=t.gitHubToken,c=async r=>{await n(1500);try{let e=await fetch(`${w}/issues/${r}/comments`,{headers:{Authorization:`Bearer ${N}`}});if(!e.ok)throw"Can't load issues";let s=await e.json();return console.log({issues:s}),s}catch{throw"Can't load issues"}};var g=class r{issueNumber=m(null);queryClient=l(b);issueQuery=i(()=>({queryKey:["issue",this.issueNumber()],enable:()=>this.issueNumber()!==null,queryFn:()=>u(this.issueNumber())}));issueCommentsQuery=i(()=>({queryKey:["issue",this.issueNumber(),"comments"],enable:()=>this.issueNumber()!==null,queryFn:()=>c(this.issueNumber())}));setIssueNumber(e){this.issueNumber.set(e)}prefetchIssue(e){this.queryClient.prefetchQuery({queryKey:["issue",e],queryFn:()=>u(e),staleTime:1e3*60*5})}seIssueData(e){this.queryClient.setQueryData(["issue",e.number.toString()],e,{updatedAt:Date.now()+1e3*60*5})}static \u0275fac=function(s){return new(s||r)};static \u0275prov=a({token:r,factory:r.\u0275fac,providedIn:"root"})};export{k as a,R as b,g as c};
